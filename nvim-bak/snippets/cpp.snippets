global !p
def code():
    return vim.eval("synIDattr(synIDtrans(synID(line('.'), col('$')-1, 1)), 'name') =~? 'Comment'") == '0'
endglobal


priority 10

snippet uns "using namespace" b
using namespace ${1:foo}
endsnippet

snippet nms "namespace" b
namespace ${1:foo}
{

${VISUAL}$0

} // namespace $1
endsnippet

snippet once "header include guard" b
#ifndef ${1:`!p snip.rv = snip.basename.upper() or "NAME"`}_HAS_BEEN_INCLUDED
#define $1_HAS_BEEN_INCLUDED

${VISUAL}$0

#endif // $1_HAS_BEEN_INCLUDED
endsnippet

snippet ib "#include with brackets" b
#include <${1:iostream}>
endsnippet

snippet iq "#include with quotes" b
#include "${1:File}.h"
endsnippet

snippet sep "separator" b
// -----------------------------------------------------------------------------
endsnippet

snippet tp "template <typename ...>" b
template <typename ${1:T}>
endsnippet

snippet cout "cout statement" w
std::cout << ${1:${VISUAL}} << "\n";
endsnippet

snippet map "std::map" w
std::map<${1:KeyType}, ${2:ValueType}> ${3:var};
endsnippet

snippet vec "std::vector" w
std::vector<${1:Type}> ${2:var};
endsnippet

snippet set "std::set" w
std::set<${1:Type}> ${2:var};
endsnippet

snippet szt "size_t" wA
size_t
endsnippet

snippet class "class ..." b
class ${1:`!p snip.rv = snip.basename or "Foo"`}
{
public:
    ${1/(\w+).*/$1/}();

    ~${1/(\w+).*/$1/}();

    ${VISUAL}
private:
    ${0:// Data}
};
endsnippet

snippet fndef "function definition" b
${1:void} ${2:foo}(${3})
{
    ${0:${VISUAL}}
}
endsnippet

snippet fnsig "function signature" b
${1:void} ${2:foo}(${3});
endsnippet

snippet if "if statement" b
if (${1:true}) {
    ${0:${VISUAL}}
}
endsnippet

snippet elif "else if statement" w
else if (${1:true}) {
    ${0:${VISUAL}}
}
endsnippet

snippet erase "Standard associative-container erase idiom" b
for (auto it = ${1:container}.cbegin(); it != $1.cend(); /* no increment */) {
    if (${2:condition}) {
        $1.erase(it++);
    } else {
        ++it;
    }
}
endsnippet

snippet leq "less than or equal to" w
<=
endsnippet

snippet geq "greater thant or equal to" w
>=
endsnippet

snippet neq "not equal to" w
!=
endsnippet

snippet or "logical or" w
||
endsnippet

snippet and "logical and" w
&&
endsnippet

snippet '(\S.*)\.if' "if (postfix)" r
if (`!p snip.rv = match.group(1)`)
endsnippet

snippet '(\S.*).ret' "return (postfix)" r
return `!p snip.rv = match.group(1)`;
endsnippet

snippet '(\S+).make_shared' "make_shared (postfix)" ir
std::make_shared<`!p snip.rv = match.group(1)`>($1);
endsnippet

snippet '(\S+).make_unique' "make_unique (postfix)" ir
std::make_unique<`!p snip.rv = match.group(1)`>($1);
endsnippet

snippet '(\S.*)\.iq' "include with quotes" r
#include "`!p snip.rv = match.group(1)`"
endsnippet

snippet '(\S.*)\.ib' "include with brackets" r
#include <`!p snip.rv = match.group(1)`>
endsnippet
