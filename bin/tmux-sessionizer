#!/usr/bin/env bash

switch_to() {
    if [[ -z $TMUX ]]; then
        tmux attach-session -t "$1"
    else
        tmux switch-client -t "$1"
    fi
}

has_session() {
    tmux has-session -t "$1" 2> /dev/null
}

hydrate() {
    if [ -f $2/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $2/.tmux-sessionizer" Enter
    elif [ -f $HOME/.tmux-sessionizer ]; then
        tmux send-keys -t $1 "source $HOME/.tmux-sessionizer" Enter
    fi
}

if [[ $# -eq 1 ]]; then
    selected=$1
else
    selected=$(
        {
            find ${DEV_DIR}/* -maxdepth 0 -type d;
            echo "$HOME/Documents/Notes";
            echo "$HOME/.dotfiles";
            echo "$HOME/.ssh";
            echo "$HOME/notes";
        } | fzf --border --print-query
    )
    selected=$(echo "$selected" | tail -1)
fi

if [[ -z $selected ]]; then
    exit 0
fi

if [[ ! -d $selected ]]; then
    # Check if the input is a GitHub URL
    if [[ $selected == https://github.com/* || $selected == git@github.com:* ]]; then
        # It's a GitHub URL, extract the repo name from the URL
        repo_name=$(basename "$selected" .git)
        echo "Cloning GitHub repo '$repo_name' to '${DEV_DIR}/$repo_name'."
        read -p "Enter new directory name or press enter to use '$repo_name': " custom_name

        if [[ -n $custom_name ]]; then
            target_dir="${DEV_DIR}/$custom_name"
        else
            target_dir="${DEV_DIR}/$repo_name"
        fi

        git clone "$selected" "$target_dir"
        if [[ $? -eq 0 ]]; then
            echo "Repository cloned successfully to $target_dir"
            selected="$target_dir"
        else
            echo "Failed to clone repository"
            exit 1
        fi
    else
        # It's a directory path, offer to create it
        read -p "Directory '${DEV_DIR}/$selected' doesn't exist. Create it? (y/n) " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mkdir -p "${DEV_DIR}/$selected"
            selected="${DEV_DIR}/$selected"
        else
            exit 0
        fi
    fi
fi

selected_name=$(basename "$selected" | tr . _)
tmux_running=$(pgrep tmux)

# `-z $TMUX` checks if the current shell is NOT running in a tmux session
# `-z $tmux_running` checks if a tmux server is NOT running
# if [[ -z $TMUX ]]; then
#     if [[ -z $tmux_running ]]; then
#         tmux new-session -s $selected_name -c $selected
#     else
#         if ! tmux has-session -t=$selected_name 2> /dev/null; then
#             tmux new-session -ds $selected_name -c $selected
#         fi
#         tmux attach-session -t $selected_name
#     fi
# else
#     if ! tmux has-session -t=$selected_name 2> /dev/null; then
#         tmux new-session -ds $selected_name -c $selected
#     fi
#     tmux switch-client -t $selected_name
# fi

if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s $selected_name -c $selected
    hydrate $selected_name $selected
    exit 0
fi

if ! has_session $selected_name; then
    tmux new-session -ds $selected_name -c $selected
    hydrate $selected_name $selected
fi

switch_to $selected_name
exit 0

